import React, { useState } from "react";
function App() {
  const [isHovered, setIsHovered] = useState(false);
  const handleMouseEnter = () => {
    setIsHovered(true);
  };
  const handleMouseLeave = () => {
    setIsHovered(false);
  };
  return (
    <div>
      <button
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
        style={{
          backgroundColor: isHovered ? "blue" : "grey",
        }}
      >
        Hover me
      </button>
    </div>
  );
}
export default App;


export default App;
import React, { useState, useEffect, use, useRef } from "react";
function CounterWithPrev() {
  const [count, setCount] = useState(0);
  const prevCountRef = useRef();
  useEffect(() => {
    prevCountRef.current = count;
  }, [count]);
  return (
    <div>
      <p>Current count:{count}</p>
      <p>preCount:{prevCountRef.current}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}
export default CounterWithPrev;
function App() {
  const handleClick = () => {
    alert("Button clicked");
  };
  return <button onClick={handleClick} click Me></button>;
}
export default App;
import React, { useState } from "react";

function App() {
  const [text, setText] = useState("");

  const handleChange = (event) => {
    setText(event.target.value);
  };

  return (
    <div>
      <input type="text" value={text} onChange={handleChange} />
      <p>Your Text:{text}</p>
    </div>
  );
}
export default App;
